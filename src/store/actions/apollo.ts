import { ApolloClient } from 'apollo-client';
import {
    InMemoryCache,
    IntrospectionFragmentMatcher,
} from 'apollo-cache-inmemory';
import { createHttpLink } from 'apollo-link-http';
import * as SecureStore from 'expo-secure-store';
import { ApolloLink } from 'apollo-link';
import { setContext } from 'apollo-link-context';
import { getEnvVars } from '../../../environment';
import { Platform } from 'react-native';
import Constants from 'expo-constants';

// generated by Fragment Matcher plugin
import introspectionResult from '../../generated/fragmentTypes';

const fragmentMatcher = new IntrospectionFragmentMatcher({
    introspectionQueryResultData: introspectionResult,
});

const { familyConnectionsURL } = getEnvVars();

const httpLink = createHttpLink({
    uri: `${familyConnectionsURL}/graphql`,
});

const authLink: ApolloLink = setContext(async (_, { headers }) => {
    // get the authentication token from local storage if it exists
    const token = await SecureStore.getItemAsync('cok_access_token');
    // return the headers to the context so httpLink can read them
    return {
        headers: {
            ...headers,
            authorization: token ? `Bearer ${token}` : '',
        },
    };
});

export const client = new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache({
        fragmentMatcher,
        cacheRedirects: {
            Query: {
                workpad: (_, { workpadId }, { getCacheKey }) =>
                    getCacheKey({ __typename: 'CaseWorkpad', id: workpadId }),
                case: (_, { caseId }, { getCacheKey }) =>
                    getCacheKey({ __typename: 'Case', id: caseId }),
                relationship: (_, { id }, { getCacheKey }) =>
                    getCacheKey({ __typename: 'Relationship', id }),
            },
        },
    }),
    name: Platform.OS,
    version: `${Constants.nativeBuildVersion}`,
});
